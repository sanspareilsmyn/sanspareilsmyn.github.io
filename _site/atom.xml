<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sangmin Yoon</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2025-01-20T15:18:20+09:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Building RDB from scratch - 01. B+ Tree</title>
   <link href="http://localhost:4000/2025/01/19/building-rdb-from-scratch-01-b-tree"/>
   <updated>2025-01-19T00:00:00+09:00</updated>
   <id>http://localhost:4000/2025/01/19/building-rdb-from-scratch-01.-b+-tree</id>
   <content type="html">&lt;h3 id=&quot;1-why-b-tree&quot;&gt;1. Why B+ tree?&lt;/h3&gt;
&lt;p&gt;When starting the construction of a lightweight relational database, the B+ tree emerges as a fundamental data structure. Its inherent ability to efficiently index and retrieve data renders it indispensable for managing structured information. Unlike traditional binary search trees, the B+ tree is specifically optimized for disk-based storage, minimizing the number of I/O operations required to access data—a crucial consideration for any relational database where data typically resides on disk, not solely in memory. Thus, the B+ tree is not merely a beneficial option, but rather a cornerstone for any viable small-scale RDB.&lt;br /&gt;
Furthermore, examining the implementation details of a B+ tree, such as those found in the open-source &lt;code&gt;collinglass/bptree&lt;/code&gt; library, offers valuable insights into practical database design and implementation, which I will explore in this post.&lt;/p&gt;

&lt;h3 id=&quot;2-implementations&quot;&gt;2. Implementations&lt;/h3&gt;

&lt;h4 id=&quot;1-core-data-structures&quot;&gt;1) Core Data Structures&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-gotemplate&quot;&gt;type Tree struct {
	Root *Node
}

type Record struct {
	Value []byte
}

type Node struct {
	Pointers []interface{}
	Keys     []int
	Parent   *Node
	IsLeaf   bool
	NumKeys  int
	Next     *Node
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tree represents the entire B+ tree structure, with the Root field serving as the entry point to the tree. It is a basic and clear way to represent the whole B+ tree structure.&lt;br /&gt;
Record struct separates keys from their byte array values ([]byte), allowing the library to handle diverse data types as long as they can be serialized.&lt;br /&gt;
Node represents a single B+ tree node, which holds Pointers (to child nodes or record values), Keys, a Parent pointer, a flag for IsLeaf, NumKeys tracking the number of valid keys, and a Next pointer for linked list of leaf nodes. The interface{} type for Pointers enables handling both nodes and records, and NumKeys ensures performance optimization to determine the number of valid keys.&lt;/p&gt;

&lt;h4 id=&quot;2-insertion&quot;&gt;2) Insertion&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-gotemplate&quot;&gt;func (t *Tree) Insert(key int, value []byte) error {
	// ...
	if t.Root == nil {
		return t.startNewTree(key, pointer)
	}
	// ...
    leaf = t.findLeaf(key, false)
    
	if leaf.NumKeys &amp;lt; order-1 {
		insertIntoLeaf(leaf, key, pointer)
		return nil
	}

	return t.insertIntoLeafAfterSplitting(leaf, key, pointer)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The insertion process first checks for a root node, creating a new tree if necessary. It locates the correct leaf node via t.findLeaf and then inserts the key if there’s capacity, using insertIntoLeaf as a helper method. When the leaf is full, t.insertIntoLeafAfterSplitting handles the node split, utilizing temporary arrays and demonstrating a “copy-on-write” approach where a new node is created during splits to keep the B+ tree balanced.&lt;/p&gt;

&lt;h4 id=&quot;3-searching&quot;&gt;3) Searching&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-gotemplate&quot;&gt;func (t *Tree) Find(key int, verbose bool) (*Record, error) {
	i := 0
	c := t.findLeaf(key, verbose)
	if c == nil {
		return nil, errors.New(&quot;key not found&quot;)
	}
	for i = 0; i &amp;lt; c.NumKeys; i++ {
		if c.Keys[i] == key {
			break
		}
	}
	if i == c.NumKeys {
		return nil, errors.New(&quot;key not found&quot;)
	}

	r, _ := c.Pointers[i].(*Record)

	return r, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The search starts with the private findLeaf function, which recursively navigates the tree to locate the appropriate leaf node. Within the leaf node, a loop iterates through the keys to find a match. Upon finding a matching key, the associated value is returned after a type assertion to the Record type. This search logic demonstrates how each node acts as a decision point, guiding the traversal along the correct search path to find the target key.&lt;/p&gt;

&lt;h4 id=&quot;4-deletion&quot;&gt;4) Deletion&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-gotemplate&quot;&gt;func (t *Tree) Delete(key int) error {
	key_record, err := t.Find(key, false)
	if err != nil {
		return err
	}
	key_leaf := t.findLeaf(key, false)
	if key_record != nil &amp;amp;&amp;amp; key_leaf != nil {
		t.deleteEntry(key_leaf, key, key_record)
	}
	return nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The deletion process begins by using t.Find and t.findLeaf to locate the target node and key. Once found, the t.deleteEntry method is invoked, which orchestrates a complex deletion procedure. This involves removeEntryFromNode to remove the key from the node, and then a series of other operations: adjustRoot to handle root node modifications, and either coalesceNodes or redistributeNodes to maintain the B+ tree’s balance through merging or redistributing nodes, respectively.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>GPT 1, 2, 3 and 4</title>
   <link href="http://localhost:4000/2025/01/14/gpt-1-2-3-and-4"/>
   <updated>2025-01-14T00:00:00+09:00</updated>
   <id>http://localhost:4000/2025/01/14/gpt-1,-2-,3-and-4</id>
   <content type="html">&lt;h3 id=&quot;1-gpt-1&quot;&gt;1) GPT-1&lt;/h3&gt;

&lt;p&gt;GPT-1 introduced a groundbreaking approach to natural language processing by leveraging the power of unsupervised pre-training. This technique involves training a language model on a massive amount of text data without any explicit labels. The resulting model, equipped with a deep understanding of language, can then be fine-tuned on specific tasks with relatively small labeled datasets.&lt;/p&gt;

&lt;h4 id=&quot;key-differences-from-traditional-supervised-learning&quot;&gt;Key Differences from Traditional Supervised Learning&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Pre-training: GPT-1’s approach starts with a pre-trained model, whereas traditional supervised learning trains a model from random initialization.&lt;/li&gt;
  &lt;li&gt;Data Efficiency: GPT-1 requires significantly less labeled data for fine-tuning, making it more practical for real-world applications.&lt;/li&gt;
  &lt;li&gt;Transfer Learning: GPT-1 enables transfer learning, allowing the model to adapt to new tasks with minimal effort.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-does-supervised-fine-tuning-work-in-gpt-1&quot;&gt;How does supervised fine-tuning work in GPT-1?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Pre-trained Model: A language model is first trained on a massive corpus of text data. This pre-training step allows the model to learn the statistical properties of language, such as grammar and semantics.&lt;/li&gt;
  &lt;li&gt;Task-Specific Fine-tuning: The pre-trained model is then adapted to a specific task using a labeled dataset. This involves adding a linear layer to the model and training it on the new task while keeping most of the pre-trained parameters fixed.&lt;/li&gt;
  &lt;li&gt;Input Transformations: To accommodate various tasks, GPT-1 employs input transformations. For instance, in question answering, the question, context, and answer choices are concatenated into a single sequence.&lt;/li&gt;
  &lt;li&gt;Objective Function: The model is trained to minimize a combined loss function that includes both a supervised loss for the specific task and an unsupervised loss to preserve the language modeling capabilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-gpt-2&quot;&gt;2) GPT-2&lt;/h3&gt;

&lt;h4 id=&quot;key-advancements-of-gpt-2&quot;&gt;Key Advancements of GPT-2&lt;/h4&gt;
&lt;p&gt;GPT-1 introduced the concept of pre-training a language model on a massive amount of text data and then fine-tuning it on specific tasks.
GPT-2 took this concept to the next level by training an even larger model on a more diverse dataset.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Increased Model Size: GPT-2 employed significantly larger models, allowing for more complex pattern recognition and better generalization.&lt;/li&gt;
  &lt;li&gt;Unsupervised Multitask Learning: Unlike GPT-1, which relied on supervised fine-tuning for specific tasks, GPT-2 demonstrated the ability to perform a wide range of tasks directly from the pre-trained model, without explicit task-specific training.&lt;/li&gt;
  &lt;li&gt;Improved Zero-Shot Learning: GPT-2 exhibited remarkable zero-shot learning capabilities, meaning it could perform tasks it had not been explicitly trained on, simply by providing the task as text.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-gpt-3&quot;&gt;3) GPT-3&lt;/h3&gt;
&lt;p&gt;GPT-3 represents a significant leap forward in the evolution of large language models, building upon the successes of its predecessors, GPT-1 and GPT-2.&lt;/p&gt;

&lt;h4 id=&quot;key-advancements-of-gpt-3&quot;&gt;Key Advancements of GPT-3&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Massive Scale: GPT-3 boasts a significantly larger number of parameters compared to GPT-2, resulting in a dramatic increase in model capacity and computational power.&lt;/li&gt;
  &lt;li&gt;Enhanced Capabilities: GPT-3 demonstrated impressive abilities in various NLP tasks, including:
    &lt;ul&gt;
      &lt;li&gt;Text generation: Generating human-like text, writing stories, translating languages, and even composing poems.&lt;/li&gt;
      &lt;li&gt;Question answering: Providing comprehensive and informative answers to a wide range of questions.&lt;/li&gt;
      &lt;li&gt;Code generation: Writing and debugging code in various programming languages.&lt;/li&gt;
      &lt;li&gt;Creative content creation: Generating novel content, such as scripts, articles, and even musical pieces.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In-context learning: GPT-3 exhibited remarkable in-context learning capabilities, demonstrating the ability to adapt to new tasks or concepts simply by providing a few examples within the input.&lt;/li&gt;
  &lt;li&gt;Few-shot learning: GPT-3 achieved impressive results in few-shot learning scenarios, where the model is provided with only a few labeled examples for a new task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-gpt-4&quot;&gt;4) GPT-4&lt;/h3&gt;
&lt;p&gt;GPT-4 represents the latest advancement in the GPT series of large language models, pushing the boundaries of AI capabilities even further.&lt;/p&gt;

&lt;h4 id=&quot;key-advancements-of-gpt-4&quot;&gt;Key Advancements of GPT-4&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Enhanced Capabilities: GPT-4 demonstrates significantly improved performance across a wide range of tasks, including:
    &lt;ul&gt;
      &lt;li&gt;Creativity: Generating more creative and innovative text formats, such as poems, code, and scripts.&lt;/li&gt;
      &lt;li&gt;Problem-solving: Exhibiting enhanced reasoning and problem-solving abilities, including the ability to handle more complex and nuanced tasks.&lt;/li&gt;
      &lt;li&gt;Safety and Reliability: GPT-4 has been developed with a strong emphasis on safety and reliability, aiming to minimize biases, hallucinations, and harmful outputs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Multimodality: GPT-4 introduces multimodality, allowing it to accept and process both text and image inputs. This opens up new possibilities for applications such as image captioning, visual question answering, and more.&lt;/li&gt;
  &lt;li&gt;Advanced In-context Learning: GPT-4 further enhances in-context learning capabilities, allowing it to learn and adapt to new tasks with even fewer examples.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Computational Limits and Simulation Argument</title>
   <link href="http://localhost:4000/2025/01/02/computational-limits-and-simulation-argument"/>
   <updated>2025-01-02T00:00:00+09:00</updated>
   <id>http://localhost:4000/2025/01/02/computational-limits-and-simulation-argument</id>
   <content type="html">&lt;h3 id=&quot;1-computational-demands-of-simulating-reality&quot;&gt;1) Computational Demands of Simulating Reality&lt;/h3&gt;

&lt;p&gt;The simulation hypothesis, a thought-provoking concept, posits that we might be living within a sophisticated computer simulation. A key question arises: could such a feature even be technically possible?
&lt;br /&gt;
The sheer computational power required to emulate a human mind is mind-boggling. Researchers have proposed estimates ranging from a modest 10^14 operations per second, based on replicating a simple neural function like contrast enhancement in the retina, to a staggering 10^16-10^17 operations per second, considering the sheer number of synapses firing in the human brain. These figures, however, may be conservative. Simulating the intricate details of synaptic interactions and dendritic trees could demand even more processing power.
Fortunately, there’s reason for optimism. The human brain likely employs redundancy at the microscopic level to compensate for the inherent unreliability of individual neurons. This suggests that more efficient, non-biological processors could achieve similar results with significantly less computational overhead.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The amount of computing power needed to emulate a human mind can likewise be roughly estimated. One estimate, based on how computationally expensive it is to replicate the functionality of a piece of nervous tissue that we have already understood and whose functionality has been replicated in silico, contrast enhancement in the retina, yields a figure of ~10^14 operations per second for the entire human brain. An alternative estimate, based the number of synapses in the brain and their firing frequency, gives a figure of ~10^16-10^17 operations per second. Conceivably, even more could be required if we want to simulate in detail the internal workings of synapses and dendritic trees. However, it is likely that the human central nervous system has a high degree of redundancy on the mircoscale to compensate for the unreliability and noisiness of its neuronal components. One would therefore expect a substantial efficiency gain when using more reliable and versatile non-biological processors.&lt;/p&gt;

  &lt;p&gt;Bostrom, Nick. “Are You Living in a Computer Simulation?” Philosophical Quarterly, 53.211 (2003): 243-255.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The true challenge lies in simulating not just individual minds, but the entire tapestry of human history – a task of unimaginable scale. Researchers estimate that simulating human history with sufficient fidelity could require a staggering 10^33 to 10^36 operations. While this seems astronomical, the potential for such a feat may lie in the realm of advanced, future technologies.
The concept of a “planetary-mass computer,” a hypothetical machine utilizing the entire mass of a planet for computational purposes, offers a glimpse into the potential scale of future computing power. Even with conservative estimates of nanotechnological capabilities, such a computer could theoretically simulate the entire history of humankind with a minuscule fraction of its processing power.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It thus seems plausible that the main computational cost in creating simulations that are indistinguishable from physical reality for human minds in the simulation resides in simulating organic brains down to the neuronal or sub-neuronal level. While it is not possible to get a very exact estimate of the cost of a realistic simulation of human history, we can use ~10^33 - 10^36 operations as a rough estimate. As we gain more experience with virtual reality, we will get a better grasp of the computational requirements for making such worlds appear realistic to their visitors. But in any case, even if our estimate is off by several orders of magnitude, this does not matter much for our argument. We noted that a rough approximation of the computational power of a planetary-mass computer is 10^42 operations per second, and that assumes only already known nanotechnological designs, which are probably far from optimal. A single such a computer could simulate the entire mental history of humankind (call this an ancestor-simulation) by using less than one millionth of its processing power for one second. A posthuman civilization may eventually build an astronomical number of such computers. We can conclude that the computing power available to a posthuman civilization is sufficient to run a huge number of ancestor-simulations even it allocates only a minute fraction of its resources to that purpose. We can draw this conclusion even while leaving a substantial margin of error in all our estimates.&lt;/p&gt;

  &lt;p&gt;Bostrom, N. (2003). Are you living in a computer simulation?. Philosophical Quarterly, 53(211), 243-255.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was inspired by Nick Bostrom’s exploration of the computational requirements for simulating a reality like ours. By delving into the staggering figures he presents, we sought to answer a fundamental question: Where do we stand in terms of our computational capabilities, and what are the potential limits to what we can achieve?&lt;/p&gt;

&lt;h3 id=&quot;2-where-are-we&quot;&gt;2) Where are we?&lt;/h3&gt;

&lt;h4 id=&quot;supercomputing&quot;&gt;Supercomputing&lt;/h4&gt;
&lt;p&gt;The quest to simulate complex systems like the human brain or entire universes demands immense computational power. While we’re still far from achieving the scale necessary for such grand simulations, advancements in supercomputing are steadily narrowing the gap.&lt;/p&gt;

&lt;p&gt;One notable example is the Aurora supercomputer at Argonne National Laboratory. This machine has achieved a sustained performance of 1.012 exaFLOPS, meaning it can perform over a quadrillion floating-point operations per second. To put this into perspective, that’s equivalent to roughly 10^18 FLOPS. The theoretical peak performance of Aurora is even more impressive, reaching nearly 2×10^18 FLOPS.&lt;/p&gt;

&lt;h4 id=&quot;gpu&quot;&gt;GPU&lt;/h4&gt;
&lt;p&gt;While supercomputers provide immense raw computing power, GPUs have emerged as a dominant force in accelerating specific tasks, particularly in the realm of artificial intelligence. NVIDIA’s latest RTX 50 series showcases the remarkable strides made in GPU technology. These GPUs are capable of performing 4000 AI TOPS (trillions of operations per second), representing a substantial leap over previous generations.&lt;/p&gt;

&lt;p&gt;Key features of the RTX 50 series include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Blackwell architecture: This cutting-edge architecture offers significant improvements in performance and power efficiency.&lt;/li&gt;
  &lt;li&gt;Power consumption: The RTX 5090 model delivers exceptional performance while consuming around 600 watts of power.&lt;/li&gt;
  &lt;li&gt;Memory bandwidth: Utilizing GDDR7 memory, these GPUs boast a massive 1.8 TB/s of memory bandwidth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;asics&quot;&gt;ASICs&lt;/h4&gt;
&lt;p&gt;Beyond general-purpose processors and GPUs, specialized chips known as Application-Specific Integrated Circuits (ASICs) are emerging as crucial players in accelerating simulations. Tailored to specific tasks, ASICs offer unparalleled performance and energy efficiency. AI accelerators, a prominent example, are designed to optimize deep learning computations. Recent advancements in AI accelerators have achieved remarkable milestones, with some chips exceeding 100 TeraFLOPS of AI performance. These chips are driving breakthroughs in natural language processing, computer vision, and other AI-driven applications.&lt;/p&gt;

&lt;p&gt;Furthermore, the rise of neuromorphic chips, inspired by the human brain’s neural architecture, is opening new avenues for simulation. These chips, with their inherent parallelism and low-power operation, are particularly well-suited for simulating biological systems and developing more energy-efficient AI algorithms. While still in their early stages, neuromorphic chips hold immense promise for revolutionizing fields such as neuroscience, robotics, and AI.&lt;/p&gt;

&lt;h3 id=&quot;3-limitations&quot;&gt;3) Limitations&lt;/h3&gt;
&lt;p&gt;While the computational power demonstrated by supercomputers, GPUs, and specialized ASICs is impressive, it’s essential to acknowledge the significant limitations that still exist. The vast computational resources required to simulate complex systems like the human brain or the universe are far beyond our current capabilities.&lt;/p&gt;

&lt;h4 id=&quot;the-insufficiency-of-current-estimates&quot;&gt;The Insufficiency of Current Estimates&lt;/h4&gt;
&lt;p&gt;The figures presented in “Where are we?”, while staggering, merely scratch the surface of the computational demands involved in creating truly comprehensive simulations. These estimates are often based on simplified models of neural networks or physical systems, and they may not accurately reflect the complexity of real-world phenomena. For instance, the human brain is a highly dynamic and interconnected system that is not fully understood, making it difficult to precisely quantify the computational requirements for simulating its functions.&lt;/p&gt;

&lt;h4 id=&quot;fundamental-limits-of-computation&quot;&gt;Fundamental Limits of Computation&lt;/h4&gt;
&lt;p&gt;Even if we could overcome the engineering challenges of building more powerful computers, there are fundamental limits to computation that may constrain our ability to simulate complex systems. These limits include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The physical limits of computing: As we continue to miniaturize transistors, we eventually reach the quantum realm, where quantum effects can disrupt computations.&lt;/li&gt;
  &lt;li&gt;The heat dissipation problem: As computers become more powerful, they generate more heat, which can limit performance and lead to system failures.&lt;/li&gt;
  &lt;li&gt;The complexity of the universe: The universe may be inherently chaotic and unpredictable, making it impossible to create a perfect simulation.&lt;/li&gt;
  &lt;li&gt;Algorithmic limitations: Even with infinite computational power, we may not have the algorithms necessary to simulate certain phenomena.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>On the Impossibility of Change</title>
   <link href="http://localhost:4000/2024/12/20/on-the-impossibility-of-change"/>
   <updated>2024-12-20T00:00:00+09:00</updated>
   <id>http://localhost:4000/2024/12/20/on-the-impossibility-of-change</id>
   <content type="html">&lt;h3 id=&quot;reminiscence&quot;&gt;Reminiscence&lt;/h3&gt;
&lt;p&gt;I’ve often felt most alive when possibilities stretched out before me like an endless horizon. College, for instance, was a time of boundless exploration. I wandered through countless academic paths, discovering countless versions of myself. But it’s the moments when I’ve felt trapped that have truly shaped my perspective.&lt;br /&gt;
My early days as an engineer were a stark example. I was a cog in a massive machine, my future seemingly predetermined. The realization was chilling. It was as if I were trapped in a glass box, watching my life play out on a loop.&lt;br /&gt;
Perhaps that’s why I’ve come to believe that the most miserable moments of my life have been those defined by a sense of permanence. When we feel stuck, when we believe that change is impossible, we become prisoners of our own making. I wonder, do others share this sentiment? Are we all searching for a way to escape the confines of our seemingly fixed realities?&lt;/p&gt;

&lt;h3 id=&quot;śūnyatā&quot;&gt;śūnyatā&lt;/h3&gt;
&lt;p&gt;The illusion of an enduring, unchanging “self,” a solidified &lt;a href=&quot;https://en.wikipedia.org/wiki/%C4%80tman_(Hinduism)&quot;&gt;ātman&lt;/a&gt; in the language of ancient Indian philosophy, is the root of much of our suffering. It’s in these moments of perceived stagnation, when the dharma of constant change seems to have ceased, that despair takes root. &lt;br /&gt;
But the truth, as I’ve come to understand through the lens of &lt;a href=&quot;https://en.wikipedia.org/wiki/%C5%9A%C5%ABnyat%C4%81&quot;&gt;śūnyatā&lt;/a&gt;, is that there is no fixed, independent self. We are a continuous flow, a dynamic interplay of &lt;a href=&quot;https://en.wikipedia.org/wiki/Skandha&quot;&gt;skandhas&lt;/a&gt; – ever-shifting aggregates of form, sensation, perception, volition, and consciousness. To resist this flow, to cling to a particular state or identity, is to invite &lt;a href=&quot;https://en.wikipedia.org/wiki/Du%E1%B8%A5kha&quot;&gt;duhkha&lt;/a&gt;, the suffering arising from craving and clinging. It’s like trying to grasp a handful of water – the harder you squeeze, the more it slips away. True freedom lies not in resisting the inevitable flux of existence, but in embracing the anicca, the impermanence of all things.&lt;br /&gt;
In retrospect, I’ve come to realize how profoundly the concept of śūnyatā has permeated my understanding of existence. Recognizing the impermanence inherent in all phenomena has enabled me to cultivate a greater sense of acceptance, allowing me to navigate life’s inevitable ups and downs with greater equanimity. The understanding that all things are subject to change has not only alleviated suffering but has also deepened my appreciation for the present moment.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-self&quot;&gt;Dynamic Self&lt;/h3&gt;
&lt;p&gt;Jung emphasized the process of &lt;a href=&quot;https://scottjeffrey.com/individuation-process/&quot;&gt;individuation&lt;/a&gt;, where the self integrates with the unconscious, moving toward a more complete state. This process can be likened to a butterfly emerging from its chrysalis, transforming into a wholly new being. Once the self has changed, it cannot revert to its previous state. We are inherently changing beings, and by embracing this change and living actively within it, we can achieve true freedom of being.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On Python UDF and Pyspark</title>
   <link href="http://localhost:4000/2024/11/07/on-python-udf-and-pyspark"/>
   <updated>2024-11-07T00:00:00+09:00</updated>
   <id>http://localhost:4000/2024/11/07/on-python-udf-and-pyspark</id>
   <content type="html">&lt;h3 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h3&gt;
&lt;p&gt;PySpark empowers us to process large datasets efficiently. However, sometimes the built-in Spark functions aren’t enough, and that’s where User-Defined Functions (UDFs) come in handy. UDFs allow users to extend Spark’s capabilities by defining custom logic in Python. 
I want to explore how Python UDFs work in PySpark, focusing on their mechanics, performance, optimization, and best practices. By understanding the underlying principles, I could leverage Python’s expressive power while ensuring scalability in distributed computing environments.&lt;/p&gt;

&lt;h3 id=&quot;2-pyspark-udf-basics&quot;&gt;2. PySpark UDF Basics&lt;/h3&gt;

&lt;h4 id=&quot;1-creating-udfs&quot;&gt;1) Creating UDFs&lt;/h4&gt;

&lt;h5 id=&quot;1--udf-decorator&quot;&gt;1.  &lt;code&gt;@udf&lt;/code&gt; Decorator&lt;/h5&gt;
&lt;p&gt;This method uses a decorator to transform a regular Python function into a Spark UDF.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from pyspark.sql.functions import udf
from pyspark.sql.types import StringType

@udf(StringType())
def my_upper(text):
    return text.upper()

# Usage with DataFrames:
# df = ... (Load or create a DataFrame with a column named &apos;my_column&apos;)
# df.select(my_upper(&quot;my_column&quot;).alias(&quot;upper_column&quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;2--sparkudfregister-function&quot;&gt;2.  &lt;code&gt;spark.udf.register&lt;/code&gt; Function&lt;/h5&gt;
&lt;p&gt;This method registers a Python function as a UDF, which can then be used in SQL queries or DataFrame transformations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from pyspark.sql import SparkSession
from pyspark.sql.types import IntegerType

spark = SparkSession.builder.appName(&quot;UDFExample&quot;).getOrCreate()

def add_five(num):
    return num + 5

spark.udf.register(&quot;addFive&quot;, add_five, IntegerType())

# Usage in SQL
# df = ...
# df.createOrReplaceTempView(&quot;my_table&quot;)
# spark.sql(&quot;SELECT addFive(my_number) FROM my_table&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;2-specifying-argument-and-return-types&quot;&gt;2) Specifying Argument and Return Types&lt;/h4&gt;

&lt;p&gt;It is crucial to specify the return type of your UDF using Spark SQL data types. This allows Spark to optimize data processing and avoid runtime errors. Common types include &lt;code&gt;StringType()&lt;/code&gt;, &lt;code&gt;IntegerType()&lt;/code&gt;, &lt;code&gt;FloatType()&lt;/code&gt;, &lt;code&gt;DateType()&lt;/code&gt;, and more.&lt;/p&gt;

&lt;h3 id=&quot;3-performance-and-limitations-of-pyspark-udfs&quot;&gt;3. Performance and Limitations of PySpark UDFs&lt;/h3&gt;
&lt;h4 id=&quot;1-performance-issues-with-python-udfs&quot;&gt;1) Performance Issues with Python UDFs&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Python Interpreter Overhead&lt;br /&gt;
Python, being an interpreted language, generally has slower execution times compared to compiled languages. When PySpark uses a Python UDF, it involves starting the Python interpreter and executing the Python code for each row or a batch of rows. This incurs significant overhead.&lt;/li&gt;
  &lt;li&gt;Data Transfer Costs&lt;br /&gt;
Data needs to be transferred between the JVM (where Spark runs) and the Python interpreter. This process includes serialization (converting data into a byte stream for transmission) and deserialization (reconstructing the original data), which can be resource-intensive, especially when dealing with large datasets. This constant data movement between environments results in substantial performance penalties.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-row-by-row-vs-vectorized-operations&quot;&gt;2) Row-by-Row vs. Vectorized Operations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Row-by-Row Operations&lt;br /&gt;
Traditional Python UDFs typically operate on a row-by-row basis, meaning the Python function is executed individually for each row. This can lead to significant overhead when dealing with massive datasets because of the per-row function call overhead.&lt;/li&gt;
  &lt;li&gt;Vectorized Operations&lt;br /&gt;
Vectorized operations, on the other hand, process data in batches or as entire columns, rather than processing row by row. This allows for optimized data processing, as these vectorized operations can leverage efficient, lower-level implementations (such as those provided by NumPy or Pandas).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-impact-on-rdd-and-dataframe-operation-speed&quot;&gt;3) Impact on RDD and DataFrame Operation Speed&lt;/h4&gt;
&lt;p&gt;Using Python UDFs can often slow down overall RDD and DataFrame operations. Built-in Spark functions are highly optimized and can often operate at the lower JVM level, which generally results in much faster operations. UDFs, however, break this optimization and introduce overhead related to the Python environment, reducing the potential benefits of using Spark.
Performance issues with Python UDFs can often stem from several potential bottlenecks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CPU Utilization: The Python interpreter and the UDF’s calculations can consume a considerable amount of CPU resources.&lt;/li&gt;
  &lt;li&gt;Memory Consumption: Data serialization and deserialization, and the creation of Python objects, can use significant memory, causing issues if not carefully managed.&lt;/li&gt;
  &lt;li&gt;Network I/O: Data transmission between JVM and Python processes across a network can become a bottleneck.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-data-serialization-and-deserialization-impact&quot;&gt;4) Data Serialization and Deserialization Impact&lt;/h4&gt;
&lt;p&gt;The process of converting data to a byte stream (serialization) before sending it to a Python process, and then reconstructing it into a JVM usable form (deserialization) can be time-consuming. Choosing the right serialization library, and optimizing data types, can reduce some of the overhead.&lt;br /&gt;
When Spark Executors encounter Python UDFs, here’s the flow:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Data is transferred from the JVM to the Python environment.&lt;/li&gt;
  &lt;li&gt;The Python process executes the UDF logic.&lt;/li&gt;
  &lt;li&gt;The results are transferred back from the Python process to the JVM.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This back-and-forth communication between two environments introduces significant overhead.&lt;/p&gt;

&lt;h4 id=&quot;5-language-limitations-python-gil-global-interpreter-lock&quot;&gt;5) Language Limitations: Python GIL (Global Interpreter Lock)&lt;/h4&gt;
&lt;p&gt;Python’s Global Interpreter Lock (GIL) allows only one thread to execute Python bytecode at any given moment. This can limit the potential for parallelism within Python UDFs, even when multiple executors are available. While multiprocessing can be used as a workaround, this adds to the complexity of implementing and managing the PySpark code.&lt;/p&gt;

&lt;h3 id=&quot;4-python-udf-optimization-techniques&quot;&gt;4. Python UDF Optimization Techniques&lt;/h3&gt;

&lt;p&gt;Given the performance limitations of standard Python UDFs, it’s crucial to employ optimization techniques to improve their efficiency. This section covers various strategies to enhance the performance of Python UDFs in PySpark.&lt;/p&gt;

&lt;h4 id=&quot;1-vectorized-udfs-with-pandas-udf&quot;&gt;1) Vectorized UDFs with Pandas UDF&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Working Principles and Advantages: Pandas UDFs utilize Apache Arrow, an in-memory columnar data format, for efficient data transfer between the JVM and Python processes. They allow data to be processed in batches, leveraging Pandas’ vectorized operations, which are significantly faster than iterating through individual rows.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;pandas_udf&lt;/code&gt; Decorator and Function Definition: We create Pandas UDFs using the &lt;code&gt;@pandas_udf&lt;/code&gt; decorator, which takes two arguments: the return type and the UDF type.
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;  from pyspark.sql.functions import pandas_udf
  from pyspark.sql.types import IntegerType, FloatType
  import pandas as pd

  # SCALAR type
  @pandas_udf(FloatType(), functionType= &quot;scalar&quot;)
  def subtract_mean(series: pd.Series) -&amp;gt; pd.Series:
      return series - series.mean()
    
  # GROUPED_MAP type
  @pandas_udf(&quot;int&quot;, &quot;grouped_map&quot;)
  def subtract_group_mean(pdf: pd.DataFrame) -&amp;gt; pd.DataFrame:
      pdf[&quot;value&quot;] = pdf[&quot;value&quot;] - pdf[&quot;value&quot;].mean()
      return pdf
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Here, &lt;code&gt;functionType&lt;/code&gt; specifies the type of pandas UDF being defined.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;GROUPED_MAP&lt;/code&gt; vs. &lt;code&gt;SCALAR&lt;/code&gt; Types:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;SCALAR&lt;/code&gt;: This type processes one or more &lt;code&gt;pd.Series&lt;/code&gt; at a time and returns a &lt;code&gt;pd.Series&lt;/code&gt;. It’s useful for applying transformations to columns. The UDF will receive one or more full columns as &lt;code&gt;pd.Series&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;GROUPED_MAP&lt;/code&gt;: This type processes one or more &lt;code&gt;pd.DataFrame&lt;/code&gt; in group and returns a &lt;code&gt;pd.DataFrame&lt;/code&gt;. It’s designed for operations that require the entire group’s data, such as calculations within groups. The UDF will receive a single group as a &lt;code&gt;pd.DataFrame&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Performance Improvement with Pandas UDFs&lt;br /&gt;
Pandas UDFs can yield significant performance improvements compared to standard Python UDFs. Vectorized operations within Pandas are highly optimized, reducing overhead and allowing for faster processing of data.
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;  from pyspark.sql import SparkSession
  from pyspark.sql.functions import pandas_udf, col
  from pyspark.sql.types import IntegerType
  import pandas as pd
    
  spark = SparkSession.builder.appName(&quot;PandasUDFExample&quot;).getOrCreate()

  data = [(1, 10), (1, 20), (2, 30), (2, 40), (3, 50)]
  df = spark.createDataFrame(data, [&quot;group&quot;, &quot;value&quot;])
    
  @pandas_udf(IntegerType(), &quot;scalar&quot;)
  def add_one(s: pd.Series) -&amp;gt; pd.Series:
      return s + 1

  df_transformed = df.withColumn(&quot;new_value&quot;, add_one(col(&quot;value&quot;)))
  df_transformed.show()
  # Output
  # +-----+-----+---------+
  # |group|value|new_value|
  # +-----+-----+---------+
  # |    1|   10|       11|
  # |    1|   20|       21|
  # |    2|   30|       31|
  # |    2|   40|       41|
  # |    3|   50|       51|
  # +-----+-----+---------+
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Performance Benefits and Use Cases&lt;br /&gt;
Pandas UDFs are especially beneficial when your UDF logic can be expressed using Pandas’ vectorized operations, such as arithmetic calculations, string operations, and data manipulation. They are suitable for tasks that require grouping and aggregations or data transformations within a group.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-data-serializationdeserialization-optimization&quot;&gt;2) Data Serialization/Deserialization Optimization&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Selecting Serialization Libraries&lt;br /&gt;
While &lt;code&gt;pickle&lt;/code&gt; is the default serialization method in Python, it’s not the most efficient, especially when dealing with large datasets. &lt;code&gt;pyarrow&lt;/code&gt; is highly recommended for data serialization, especially when using Pandas UDFs, as it is designed for efficient columnar data formats and transfer between JVM and Python processes.&lt;/li&gt;
  &lt;li&gt;Data Type Optimization&lt;br /&gt;
Choose the smallest possible data type that can accommodate your data to reduce the size of the serialized data. Explicitly specify data types using Spark SQL types when defining UDFs.&lt;/li&gt;
  &lt;li&gt;Broadcasting Data for Efficient Transfer&lt;br /&gt;
If your UDF requires static data, broadcasting it to executors can significantly reduce the amount of data that needs to be transferred. Broadcasting is a technique to share immutable data with all executors efficiently.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
